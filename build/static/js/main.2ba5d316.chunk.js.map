{"version":3,"sources":["appConfig.js","App.js","serviceWorker.js","index.js"],"names":["appConfig","AppConfig","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","redirectToSignIn","userSession","UserSession","state","isSignInPending","isUserSignedIn","_this2","session","handlePendingSignIn","then","userData","setState","username","Error","e","preventDefault","signUserOut","window","location","_this3","_this$state","react_default","a","createElement","className","style","width","margin","display","fontFamily","marginLeft","lineHeight","marginRight","borderRadius","height","background","onClick","type","signOut","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAEaA,EAAY,IAAIC,YAAU,CAAC,cAAe,iBC4DxCC,cAzDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAuBHI,iBAAmB,kBAAMP,EAAKQ,YAAYD,oBAtBvCP,EAAKQ,YAAc,IAAIC,cAAY,CAAEZ,cACrCG,EAAKU,MAAQ,CACXC,gBAAiBX,EAAKQ,YAAYG,kBAClCC,eAAgBZ,EAAKQ,YAAYI,kBALxBZ,mFASO,IAAAa,EAAAV,KACZW,EAAUX,KAAKK,aACjBM,EAAQF,kBAAoBE,EAAQH,mBACtCG,EAAQC,sBACPC,KAAK,SAACC,GAEL,GADAJ,EAAKK,SAAS,CAAED,cACXA,EAASE,SAAU,MAAM,IAAIC,MAAM,iCACxCP,EAAKK,SAAS,CACZN,eAAgBE,EAAQF,iBACxBD,gBAAiBG,EAAQH,sDAQ1BU,GACNA,EAAEC,iBACFnB,KAAKK,YAAYe,cACjBC,OAAOC,SAAW,qCAGX,IAAAC,EAAAvB,KAAAwB,EACqCxB,KAAKO,MAAzCE,EADDe,EACCf,eAAgBD,EADjBgB,EACiBhB,gBACxB,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,MAAO,MAAOC,OAAQ,WACjCN,EAAAC,EAAAC,cAAA,UAAQE,MAAO,CAACG,QAAS,OAAQC,WAAY,cAC3CR,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,WAASE,MAAO,CAACK,WAAY,OAAQC,WAAY,SAC/CV,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAACG,QAAS,eAAgBI,YAAa,OAAQC,aAAc,MAAOP,MAAO,MAAOQ,OAAQ,MAAOC,WAAY9B,EAAiB,QAAU,MAAO0B,WAAY,UACxKV,EAAAC,EAAAC,cAAA,YAAOlB,EAAiB,YAAcD,EAAkB,aAAe,mBAI3EiB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,gBACIlB,GAAkBgB,EAAAC,EAAAC,cAAA,UAAQa,QAAS,kBAAMjB,EAAKnB,oBAAoBqC,KAAK,UAArD,yBACnBhC,GAAkBgB,EAAAC,EAAAC,cAAA,UAAQa,QAAS,SAAAtB,GAAC,OAAIK,EAAKmB,QAAQxB,IAAIuB,KAAK,UAA5C,uBAjDfE,aCQEC,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCbNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.2ba5d316.chunk.js","sourcesContent":["import { AppConfig } from 'blockstack'\n\nexport const appConfig = new AppConfig(['store_write', 'publish_data'])\n","import React, { Component } from 'react'\nimport { UserSession } from 'blockstack'\nimport { appConfig } from './appConfig'\n\nclass App extends Component {\n  constructor() {\n     super()\n     this.userSession = new UserSession({ appConfig })\n     this.state = {\n       isSignInPending: this.userSession.isSignInPending(),\n       isUserSignedIn: this.userSession.isUserSignedIn()\n     }\n   }\n\n   componentDidMount() {\n     const session = this.userSession\n     if(!session.isUserSignedIn() && session.isSignInPending()) {\n       session.handlePendingSignIn()\n       .then((userData) => {\n         this.setState({ userData })\n         if (!userData.username) throw new Error('This app requires a username.')\n         this.setState({\n           isUserSignedIn: session.isUserSignedIn(),\n           isSignInPending: session.isSignInPending()\n         })\n       })\n     }\n   }\n\n  redirectToSignIn = () => this.userSession.redirectToSignIn()\n\n  signOut(e) {\n    e.preventDefault()\n    this.userSession.signUserOut()\n    window.location = '/'\n  }\n\n  render() {\n    const { isUserSignedIn, isSignInPending } = this.state\n    return (\n      <div className=\"App\">\n        <div style={{width: '80%', margin: '0 auto'}}>\n          <header style={{display: 'flex', fontFamily: 'monospace'}}>\n            <h1>React Blockstack app</h1>\n            <section style={{marginLeft: 'auto', lineHeight: '60px'}}>\n              <span style={{display: 'inline-block', marginRight: '10px', borderRadius: '50%', width: '8px', height: '8px', background: isUserSignedIn ? 'green' : 'red', lineHeight: '60px'}}></span>\n              <span>{isUserSignedIn ? 'Connected' : isSignInPending ? 'Loading...' : 'Not connected'}</span>\n            </section>\n          </header>\n\n          <article>\n            <section>\n              {!isUserSignedIn && <button onClick={() => this.redirectToSignIn()} type=\"submit\">Login with Blockstack</button>}\n              {isUserSignedIn && <button onClick={e => this.signOut(e)} type=\"submit\">Sign out</button>}\n            </section>\n          </article>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}